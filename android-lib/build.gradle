buildscript {
    ext.kotlin_version = kotlin_version
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-platform-android'
apply plugin: 'maven'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    packagingOptions {
        exclude '/META-INF/main.kotlin_module'
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals("debug")) {
        return; // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar

    task.dependsOn variant.javaCompiler
    task.from variant.javaCompiler.destinationDir

    def kotlinTask = "compile${name.capitalize()}Kotlin"
    task.from files {
        tasks.getByName("compile${name.capitalize()}Kotlin").destinationDir
    }.builtBy(kotlinTask)

    artifacts.add('archives', task);
}

dependencies {
    expectedBy project(":MPP-template-common")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    testImplementation "junit:junit:4.12"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

group = 'org.jetbrains.qa'
version = '0.1.2'

publishing {
    publications {
        mavenJava(MavenPublication) {
            version = project.version
            artifactId = project.name
            groupId = project.group
            artifact("$buildDir/libs/${project.name}-${project.version}.jar")
            artifact (sourceJar)
        }
    }
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}



/*
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ['-Xprogressive']
        jvmTarget = "1.8"
    }
}*/
